var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, internalProperty, LitElement, property, } from 'lit-element';
import { unsafeHTML } from 'lit-html/directives/unsafe-html';
import { connect, installRouter } from 'pwa-helpers';
import { addRoute, setActiveRoute } from './actions';
import { getRouteParams, isRouteActive } from './selectors';
let routerInstalled = false;
// eslint-disable-next-line import/no-mutable-exports, @typescript-eslint/no-explicit-any
export let RouteClass;
export default (store) => {
    /**
     * Element that renders its content or a component
     * when browser route matches
     * @element lit-route
     * @demo ../demo/index.html
     */
    let Route = class Route extends connect(store)(LitElement) {
        constructor() {
            super(...arguments);
            this.active = false;
            this.params = {};
            this.isResolving = false;
            this.scrollDisable = false;
        }
        firstUpdated() {
            if (!routerInstalled) {
                installRouter(({ pathname, search, hash }) => {
                    const path = window.decodeURIComponent(pathname + search + hash);
                    store.dispatch(setActiveRoute(path));
                });
                routerInstalled = true;
            }
            let current = this.parentElement;
            let { path } = this;
            while (current) {
                const closestLitRoute = current.closest('lit-route');
                if (closestLitRoute) {
                    path = `${closestLitRoute.path}${path}`;
                }
                current = closestLitRoute && closestLitRoute.parentElement;
            }
            const hasChildRoutes = Boolean(this.querySelector('lit-route'));
            if (hasChildRoutes) {
                path += '.*';
            }
            this.path = path;
            if (typeof this.path !== 'undefined') {
                store.dispatch(addRoute(this.path));
            }
        }
        stateChanged(state) {
            const isActive = isRouteActive(state, this.path);
            const hasBecomeActive = !this.active && isActive;
            this.active = isActive;
            this.params = getRouteParams(state, this.path);
            if (this.active && this.resolve) {
                this.isResolving = true;
                this.resolve()
                    .then(() => {
                    this.isResolving = false;
                })
                    .catch(() => {
                    this.isResolving = false;
                });
            }
            if (this.active && !this.scrollDisable) {
                if (typeof this.scrollOpt !== 'undefined') {
                    if (hasBecomeActive) {
                        this.scrollIntoView(this.scrollOpt);
                    }
                }
                else {
                    window.scrollTo(0, 0);
                }
            }
        }
        getTemplate(component, attributesObject) {
            const tagName = component.replace(/[^A-Za-z0-9-]/, '');
            let attributes = '';
            if (attributesObject) {
                attributes = Object.keys(attributesObject)
                    .map((param) => ` ${param}="${this.params[param]}"`)
                    .join('');
            }
            const template = `<${tagName}${attributes}></${tagName}>`;
            return html `${unsafeHTML(template)}`;
        }
        render() {
            if (!this.active) {
                return html ``;
            }
            if (this.resolve && this.isResolving) {
                return typeof this.loading === 'undefined' ? html `` : this.getTemplate(this.loading);
            }
            if (typeof this.component === 'undefined') {
                return html `<slot></slot>`;
            }
            return this.getTemplate(this.component, this.params);
        }
    };
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Route.prototype, "active", void 0);
    __decorate([
        property({ type: String })
    ], Route.prototype, "component", void 0);
    __decorate([
        internalProperty()
    ], Route.prototype, "params", void 0);
    __decorate([
        property({ type: String })
    ], Route.prototype, "path", void 0);
    __decorate([
        internalProperty()
    ], Route.prototype, "isResolving", void 0);
    __decorate([
        property()
    ], Route.prototype, "resolve", void 0);
    __decorate([
        property({ type: String })
    ], Route.prototype, "loading", void 0);
    __decorate([
        property({ type: Object })
    ], Route.prototype, "scrollOpt", void 0);
    __decorate([
        property({ type: Boolean })
    ], Route.prototype, "scrollDisable", void 0);
    Route = __decorate([
        customElement('lit-route')
    ], Route);
    RouteClass = Route;
};
//# sourceMappingURL=route.js.map